[comment encoding = UTF-8 /]
[module EMFHandler('http://www.eclipse.org/emf/2002/Ecore')]
[import org::variability::definition::diagram::design::generate::template::request::queriesPresenceCondUtils /]


[template public generateEMFHandler(projectName : EString)]
[file (getPackagePathbyProjectName(projectName).concat('/utils/EMFHandler.java'), false, 'UTF-8')]
package [projectName/].utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.serializer.impl.Serializer;

import com.google.inject.Guice;
import com.google.inject.Injector;
import pnpl_variability.PNPL_variabilityRuntimeModule;

public class EMFHandler {
	private ResourceSet rs;
	private Injector injector;
	
	public EMFHandler() {
		injector = Guice.createInjector(new PNPL_variabilityRuntimeModule());
		rs = injector.getInstance(XtextResourceSet.class);		
		((XtextResourceSet)rs).addLoadOption(XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE);
	}	
	
	public Resource loadModel(File model) {		
		URI uri = URI.createFileURI(model.getPath());
		Resource resource = rs.getResource(uri, true);
		return resource;
	}

	public Resource loadXtextModel(File model) {
		Resource resource = rs.createResource(URI.createPlatformResourceURI(model.getAbsolutePath(), true));
		InputStream in;
		try {
			in = new FileInputStream(model);
			resource.load(in, rs.getLoadOptions());
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}		
		return resource;
	}

	public String object2xtext (EObject eobj) {
		Serializer serializer = injector.getInstance(Serializer.class);  
		return serializer.serialize(eobj);
	}
	
	public void removeAllPNObjects(Resource newr, List<EObject> toDelete) {
		EcoreUtil.removeAll(toDelete);		
	}
	
}

[/file]
[/template]